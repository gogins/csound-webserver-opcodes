/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_CSOUNDSKELETON_H_
#define JSONRPC_CPP_STUB_CSOUNDSKELETON_H_

#include <jsonrpccpp/server.h>

class CsoundSkeleton : public jsonrpc::AbstractServer<CsoundSkeleton>
{
    public:
        CsoundSkeleton(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<CsoundSkeleton>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("CompileCsdText", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "csd_text",jsonrpc::JSON_STRING, NULL), &CsoundSkeleton::CompileCsdTextI);
            this->bindAndAddMethod(jsonrpc::Procedure("CompileOrc", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "orc_code",jsonrpc::JSON_STRING, NULL), &CsoundSkeleton::CompileOrcI);
            this->bindAndAddMethod(jsonrpc::Procedure("EvalCode", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_REAL, "orc_code",jsonrpc::JSON_STRING, NULL), &CsoundSkeleton::EvalCodeI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetControlChannel", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_REAL, "channel_name",jsonrpc::JSON_STRING, NULL), &CsoundSkeleton::GetControlChannelI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetKsmps", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &CsoundSkeleton::GetKsmpsI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetNchnls", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &CsoundSkeleton::GetNchnlsI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetNchnlsInput", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &CsoundSkeleton::GetNchnlsInputI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetScoreTime", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_REAL,  NULL), &CsoundSkeleton::GetScoreTimeI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetSr", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &CsoundSkeleton::GetSrI);
            this->bindAndAddMethod(jsonrpc::Procedure("InputMessage", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "sco_code",jsonrpc::JSON_STRING, NULL), &CsoundSkeleton::InputMessageI);
            this->bindAndAddMethod(jsonrpc::Procedure("IsScorePending", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_BOOLEAN,  NULL), &CsoundSkeleton::IsScorePendingI);
            this->bindAndAddNotification(jsonrpc::Procedure("Message", jsonrpc::PARAMS_BY_NAME, "message",jsonrpc::JSON_STRING, NULL), &CsoundSkeleton::MessageI);
            this->bindAndAddMethod(jsonrpc::Procedure("ReadScore", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "sco_code",jsonrpc::JSON_STRING, NULL), &CsoundSkeleton::ReadScoreI);
            this->bindAndAddMethod(jsonrpc::Procedure("RewindScore", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER,  NULL), &CsoundSkeleton::RewindScoreI);
            this->bindAndAddMethod(jsonrpc::Procedure("ScoreEvent", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "opcode_code",jsonrpc::JSON_STRING,"pfields",jsonrpc::JSON_ARRAY, NULL), &CsoundSkeleton::ScoreEventI);
            this->bindAndAddMethod(jsonrpc::Procedure("SetControlChannel", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "channel_name",jsonrpc::JSON_STRING,"channel_value",jsonrpc::JSON_REAL, NULL), &CsoundSkeleton::SetControlChannelI);
            this->bindAndAddMethod(jsonrpc::Procedure("SetMessageCallback", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "callback",jsonrpc::JSON_OBJECT, NULL), &CsoundSkeleton::SetMessageCallbackI);
            this->bindAndAddMethod(jsonrpc::Procedure("SetScorePending", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_INTEGER, "score_time",jsonrpc::JSON_REAL, NULL), &CsoundSkeleton::SetScorePendingI);
        }

        inline virtual void CompileCsdTextI(const Json::Value &request, Json::Value &response)
        {
            response = this->CompileCsdText(request["csd_text"].asString());
        }
        inline virtual void CompileOrcI(const Json::Value &request, Json::Value &response)
        {
            response = this->CompileOrc(request["orc_code"].asString());
        }
        inline virtual void EvalCodeI(const Json::Value &request, Json::Value &response)
        {
            response = this->EvalCode(request["orc_code"].asString());
        }
        inline virtual void GetControlChannelI(const Json::Value &request, Json::Value &response)
        {
            response = this->GetControlChannel(request["channel_name"].asString());
        }
        inline virtual void GetKsmpsI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->GetKsmps();
        }
        inline virtual void GetNchnlsI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->GetNchnls();
        }
        inline virtual void GetNchnlsInputI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->GetNchnlsInput();
        }
        inline virtual void GetScoreTimeI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->GetScoreTime();
        }
        inline virtual void GetSrI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->GetSr();
        }
        inline virtual void InputMessageI(const Json::Value &request, Json::Value &response)
        {
            response = this->InputMessage(request["sco_code"].asString());
        }
        inline virtual void IsScorePendingI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->IsScorePending();
        }
        inline virtual void MessageI(const Json::Value &request)
        {
            this->Message(request["message"].asString());
        }
        inline virtual void ReadScoreI(const Json::Value &request, Json::Value &response)
        {
            response = this->ReadScore(request["sco_code"].asString());
        }
        inline virtual void RewindScoreI(const Json::Value &request, Json::Value &response)
        {
            (void)request;
            response = this->RewindScore();
        }
        inline virtual void ScoreEventI(const Json::Value &request, Json::Value &response)
        {
            response = this->ScoreEvent(request["opcode_code"].asString(), request["pfields"]);
        }
        inline virtual void SetControlChannelI(const Json::Value &request, Json::Value &response)
        {
            response = this->SetControlChannel(request["channel_name"].asString(), request["channel_value"].asDouble());
        }
        inline virtual void SetMessageCallbackI(const Json::Value &request, Json::Value &response)
        {
            response = this->SetMessageCallback(request["callback"]);
        }
        inline virtual void SetScorePendingI(const Json::Value &request, Json::Value &response)
        {
            response = this->SetScorePending(request["score_time"].asDouble());
        }
        virtual int CompileCsdText(const std::string& csd_text) = 0;
        virtual int CompileOrc(const std::string& orc_code) = 0;
        virtual double EvalCode(const std::string& orc_code) = 0;
        virtual double GetControlChannel(const std::string& channel_name) = 0;
        virtual int GetKsmps() = 0;
        virtual int GetNchnls() = 0;
        virtual int GetNchnlsInput() = 0;
        virtual double GetScoreTime() = 0;
        virtual int GetSr() = 0;
        virtual int InputMessage(const std::string& sco_code) = 0;
        virtual bool IsScorePending() = 0;
        virtual void Message(const std::string& message) = 0;
        virtual int ReadScore(const std::string& sco_code) = 0;
        virtual int RewindScore() = 0;
        virtual int ScoreEvent(const std::string& opcode_code, const Json::Value& pfields) = 0;
        virtual int SetControlChannel(const std::string& channel_name, double channel_value) = 0;
        virtual int SetMessageCallback(const Json::Value& callback) = 0;
        virtual int SetScorePending(double score_time) = 0;
};

#endif //JSONRPC_CPP_STUB_CSOUNDSKELETON_H_
